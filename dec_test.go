package fdkaac

import (
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

var _ = Describe("", func() {
	var (
		decoder *AacDecoder
		err     error
	)

	BeforeEach(func() {
		decoder = nil
		err = nil
	})

	It("Decoder create and close", func() {
		decoder, err = CreateAccDecoder(nil)
		Expect(err).To(BeNil())
		Expect(decoder.ph).NotTo(BeNil())

		err = decoder.Close()
		Expect(err).To(BeNil())
		Expect(decoder.ph).To(BeNil())
	})

	It("Decoder config raw", func() {
		decoder, err = CreateAccDecoder(&AacDecoderConfig{
			TransportFmt: TtMp4Raw,
		})
		defer func() { decoder.Close() }()

		// 0b 00010 0100 0010 000
		err = decoder.ConfigRaw([]byte{0x12, 0x10})
		Expect(err).To(BeNil())

		info, err := decoder.GetStreamInfo()
		Expect(err).To(BeNil())
		Expect(info).NotTo(BeNil())
		Expect(info.AOT).To(Equal(AotAacLc))
		Expect(info.AacSampleRate).To(Equal(44100))
		Expect(info.ChannelConfig).To(Equal(2))
		Expect(info.AacSamplesPerFrame).To(Equal(1024))
	})

	It("Decoder decode adts", func() {
		decoder, err = CreateAccDecoder(&AacDecoderConfig{
			TransportFmt: TtMp4Adts,
		})
		defer func() { decoder.Close() }()

		outBuf := make([]byte, 4096)

		n, err := decoder.DecodeFrame(AAC0, outBuf)
		Expect(err).To(BeNil())
		Expect(n).To(Equal(4096))

		n, err = decoder.DecodeFrame(AAC1[0:9], outBuf)
		Expect(err).To(Equal(DecNotEnoughBits))
		Expect(n).To(Equal(0))

		n, err = decoder.DecodeFrame(AAC1[9:], outBuf)
		Expect(err).To(BeNil())
		Expect(n).To(Equal(4096))

		n, err = decoder.DecodeFrame(AAC2[0:9], outBuf)
		Expect(err).To(Equal(DecNotEnoughBits))
		Expect(n).To(Equal(0))

		err = decoder.Flush()
		Expect(err).To(BeNil())

		n, err = decoder.DecodeFrame(AAC2, outBuf)
		Expect(err).To(BeNil())
		Expect(n).To(Equal(4096))
	})

	It("Decoder decode raw", func() {
		decoder, err = CreateAccDecoder(&AacDecoderConfig{
			TransportFmt: TtMp4Raw,
		})
		defer func() { decoder.Close() }()

		// 0b 00010 0100 0010 000
		err = decoder.ConfigRaw([]byte{0x12, 0x10})
		Expect(err).To(BeNil())

		info, err := decoder.GetStreamInfo()
		Expect(err).To(BeNil())
		Expect(info).NotTo(BeNil())

		outBuf := make([]byte, 4096)

		n, err := decoder.DecodeFrame(AAC0[7:], outBuf)
		Expect(err).To(BeNil())
		Expect(n).To(Equal(4096))

		n, err = decoder.DecodeFrame(AAC1[7:], outBuf)
		Expect(err).To(BeNil())
		Expect(n).To(Equal(4096))

		n, err = decoder.DecodeFrame(AAC2[7:], outBuf)
		Expect(err).To(BeNil())
		Expect(n).To(Equal(4096))
	})
})

var AAC0 = []byte{
	0xff, 0xf1, 0x50, 0x80, 0x0e, 0x60, 0xfc,
	0x21, 0x17, 0x55, 0x45, 0x0d, 0x88, 0x90, 0x13, 0x04, 0x2c, 0xa4, 0x01, 0x01, 0xd0, 0x20, 0x3e,
	0x27, 0x6d, 0x38, 0x35, 0x4a, 0x0b, 0x59, 0xb5, 0xde, 0x8d, 0xad, 0x72, 0x7b, 0xa6, 0xe4, 0xd7,
	0xbe, 0x0c, 0xfa, 0xe8, 0x0e, 0x1d, 0xaa, 0xc7, 0x0a, 0x44, 0xd2, 0x33, 0x81, 0xd8, 0x24, 0x81,
	0xd4, 0xc1, 0x76, 0x9b, 0x5b, 0x88, 0x58, 0x9c, 0x23, 0x82, 0xf5, 0x2c, 0x26, 0x04, 0x94, 0x80,
	0xab, 0x7b, 0x28, 0x0a, 0x66, 0x30, 0x90, 0x0a, 0x6a, 0x02, 0x16, 0xb0, 0x50, 0x06, 0x83, 0x6e,
	0xfa, 0xea, 0xe1, 0xd7, 0x30, 0xf0, 0x9b, 0x18, 0x25, 0xfc, 0x6b, 0x42, 0x5a, 0x3c, 0x5e, 0x3c,
	0x18, 0xe7, 0xad, 0xda, 0xc2, 0xcc, 0x09, 0x04, 0xa6, 0x90, 0x91, 0xc0,
}

var AAC1 = []byte{
	0xff, 0xf1, 0x50, 0x80, 0x0d, 0x40, 0xfc,
	0x21, 0x17, 0x55, 0x45, 0x95, 0x18, 0x2c, 0x05, 0x44, 0x10, 0x00, 0xd6, 0x97, 0x40, 0x7b, 0xe4,
	0xb1, 0xcb, 0xcb, 0xd1, 0xa8, 0xc6, 0x40, 0x7d, 0x7c, 0xb3, 0x64, 0xd1, 0x4a, 0xdc, 0x48, 0x53,
	0xfc, 0x32, 0xaa, 0x0a, 0xe9, 0x25, 0xca, 0x7b, 0x4e, 0x5a, 0xa7, 0x4b, 0x52, 0x96, 0xce, 0xee,
	0x5a, 0xe8, 0xde, 0xe6, 0x0c, 0x7f, 0xc0, 0x70, 0x10, 0x6d, 0x54, 0x10, 0x12, 0x0c, 0xc0, 0x52,
	0x4b, 0x04, 0xe0, 0x31, 0x18, 0x08, 0x44, 0x00, 0x00, 0x3a, 0x5e, 0x82, 0xff, 0xc8, 0xe9, 0x6b,
	0x77, 0x18, 0xdd, 0x64, 0xe6, 0x00, 0x15, 0x88, 0x02, 0x62, 0x74, 0x3d, 0xd3, 0x90, 0x02, 0x65,
	0x98, 0x80, 0x1c,
}

var AAC2 = []byte{
	0xff, 0xf1, 0x50, 0x80, 0x0e, 0x60, 0xfc,
	0x21, 0x17, 0x55, 0x45, 0x0d, 0x88, 0x90, 0x13, 0x04, 0x2c, 0xa4, 0x01, 0x01, 0xd0, 0x20, 0x3e,
	0x27, 0x6d, 0x38, 0x35, 0x4a, 0x0b, 0x59, 0xb5, 0xde, 0x8d, 0xad, 0x72, 0x7b, 0xa6, 0xe4, 0xd7,
	0xbe, 0x0c, 0xfa, 0xe8, 0x0e, 0x1d, 0xaa, 0xc7, 0x0a, 0x44, 0xd2, 0x33, 0x81, 0xd8, 0x24, 0x81,
	0xd4, 0xc1, 0x76, 0x9b, 0x5b, 0x88, 0x58, 0x9c, 0x23, 0x82, 0xf5, 0x2c, 0x26, 0x04, 0x94, 0x80,
	0xab, 0x7b, 0x28, 0x0a, 0x66, 0x30, 0x90, 0x0a, 0x6a, 0x02, 0x16, 0xb0, 0x50, 0x06, 0x83, 0x6e,
	0xfa, 0xea, 0xe1, 0xd7, 0x30, 0xf0, 0x9b, 0x18, 0x25, 0xfc, 0x6b, 0x42, 0x5a, 0x3c, 0x5e, 0x3c,
	0x18, 0xe7, 0xad, 0xda, 0xc2, 0xcc, 0x09, 0x04, 0xa6, 0x90, 0x91, 0xc0,
}
